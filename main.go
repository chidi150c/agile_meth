package main

import (
	// "ai_agents/agile_meth/ai_model/assistants"
	// "ai_agents/agile_meth/ai_model/ollama"
	"ai_agents/agile_meth/config"
	"ai_agents/agile_meth/planning"
	"ai_agents/agile_meth/ai_model/ollama"
	"fmt"
)

func main() {
	// c := config.NewModelConfigs()["gpt4"]
	// devon := chat.NewOpenAI(planning.CodePrompt, c.ApiKey, c.Url, c.Model)
	// scron :=  chat.NewOpenAI(planning.ScrumPrompt, c.ApiKey, c.Url, c.Model)
	// queon := chat.NewOpenAI(planning.QuestionPrompt, c.ApiKey, c.Url, c.Model)
	// anson :=chat.NewOpenAI(planning.AnswersPrompt, c.ApiKey, c.Url, c.Model)

	c := config.NewModelConfigs()["ollama"]
    devon := ollama.NewOllama(c.Url, c.Model)
    scron := ollama.NewOllama(c.Url, c.Model)
    queon := ollama.NewOllama(c.Url, c.Model)
    anson := ollama.NewOllama(c.Url, c.Model)
    preon := ollama.NewOllama(c.Url, c.Model)
	devon.SystemMessage = planning.CodePrompt
	scron.SystemMessage = planning.ScrumPrompt
	queon.SystemMessage = planning.QuestionPrompt
	anson.SystemMessage = planning.AnswersPrompt
	preon.SystemMessage = planning.PreSalesPrompt

	sm := planning.NewAgileProject("ScrumMaster", devon, scron, queon, anson, preon)
	vision := `To Build an App that maximizes cryptocurrency trading profit with automatic tradingâ€‹`
	// vision := `Enhance your understanding and practical application of Go's concurrency features by developing a simple but efficient concurrent web crawler. This project will require you to utilize goroutines for parallel processing and channels for communication and synchronization among goroutines.`
    // vision := `Vision: Build a world wide game that millions around the world could play in the virtual environment generated by AI. Adopt Agile methodology and step by step code by code session by session implement the game using agile methodology.`
	// vision := `The vision is to create a robust and efficient VectorDB tailored specifically for the generative AI application, facilitating seamless data management and manipulation to support the AI's creative processes and enhance its overall performance.`
   	// vision := `Vision: Build a world wide game that millions around the world could play in the virtual environment generated by AI. Adopt Agile methodology and step by step code by code session by session implement the game using agile methodology.`
	vision =  sm.VisionArgumentation(vision) 
	goals := sm.BreakDownVisionIntoGoals(vision)
	fmt.Printf("THE FOLLOWING ARE GOALS TO ACHIEVE THE VISION:\n\n")
    for k, v := range goals{
        fmt.Printf("Goal%d: %s: %s \n\n", k+1, v.Goal, v.Reasoning)
    }
	userStory := sm.CreateUserStory(vision, 0)
	
	fmt.Printf("\nUSER STORY:\n")
	fmt.Println(userStory.Description)
	// tester.WorkOn(userStory)
	// designer.WorkOn(userStory)
}

